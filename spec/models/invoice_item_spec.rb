require 'rails_helper'

RSpec.describe InvoiceItem, type: :model do
  describe 'relationships' do

    it {should belong_to(:item)}
    it {should belong_to(:invoice)}

  end

  describe 'enums' do
    it 'response to status methods' do
      customer = Customer.create!(first_name: "Gunther", last_name: "Guyman")
      invoice = Invoice.create!(customer_id: customer.id, status: 0)
      merchant = Merchant.create!(name: "Phrank")
      item = Item.create!(name: "Cool Pencil", description: "See name", unit_price: 5000, merchant_id: merchant.id)
      invoice_item = InvoiceItem.create!(invoice_id: invoice.id, item_id: item.id, quantity: 2, unit_price: item.unit_price, status: 0)

      expect(invoice_item.pending?).to eq(true)

      invoice_item.shipped!
      expect(invoice_item.pending?).to eq(false)
    end
  end

  describe 'instance methods' do
    describe '.item_name' do
      it 'returns the name of the associated item' do
        invoice_item = create(:invoice_item)

        expect(invoice_item.item_name).to eq(invoice_item.item.name)
      end
    end

    describe'.invoice_date' do
      it 'returns the date thats its invoice was created' do
        invoice_item = create(:invoice_item)

        expect(invoice_item.invoice_date).to eq(invoice_item.invoice.created_at)
      end
    end

    describe '.bulk_discount' do
      it 'returns the highest bulk_discount for the invoice_item' do
        merchant = create(:merchant)
        bulk_discount_1 = create(:bulk_discount, threshold: 6, discount: 10, merchant: merchant)
        bulk_discount_2 = create(:bulk_discount, threshold: 10, discount: 15, merchant: merchant)
        item = create(:item, merchant: merchant)
        invoice = create(:invoice)
        invoice_item_1 = create(:invoice_item, invoice: invoice, item: item, quantity: 6)
        invoice_item_2 = create(:invoice_item, invoice: invoice, item: item, quantity: 8)
        invoice_item_3 = create(:invoice_item, invoice: invoice, item: item, quantity: 10)
        invoice_item_4 = create(:invoice_item, invoice: invoice, item: item, quantity: 15)
        invoice_item_5 = create(:invoice_item, invoice: invoice, item: item, quantity: 3)

        expect(invoice_item_1.bulk_discount).to eq(bulk_discount_1)
        expect(invoice_item_2.bulk_discount).to eq(bulk_discount_1)
        expect(invoice_item_3.bulk_discount).to eq(bulk_discount_2)
        expect(invoice_item_4.bulk_discount).to eq(bulk_discount_2)
        expect(invoice_item_5.bulk_discount).to be nil
      end
    end
  end

  describe 'class methods' do
    before :each do
      @merchant = create(:merchant)
      @bulk_discount_1 = create(:bulk_discount, threshold: 6, discount: 10, merchant: @merchant)
      @bulk_discount_2 = create(:bulk_discount, threshold: 10, discount: 15, merchant: @merchant)
      @items = create_list(:item, 5, merchant: @merchant)
      @invoice = create(:invoice)
      @invoice_item_1 = create(:invoice_item, item: @items[0], quantity: 15, unit_price: 15000, invoice: @invoice)
      @invoice_item_2 = create(:invoice_item, item: @items[1], quantity: 8, unit_price: 6000)
      @invoice_item_3 = create(:invoice_item, item: @items[2], quantity: 7, unit_price: 1375, invoice: @invoice)
      @invoice_item_4 = create(:invoice_item, item: @items[3], quantity: 4, unit_price: 1825)
      @invoice_item_5 = create(:invoice_item, item: @items[4], quantity: 5, unit_price: 2500, invoice: @invoice)
    end

    describe '#total_revenue' do
      it 'returns the total revenue generated by all or a subset of invoice_items' do
        expect(InvoiceItem.total_revenue).to eq(302425)
        expect(@invoice.invoice_items.total_revenue).to eq(247125)
        expect(price_convert(@invoice.invoice_items.total_revenue)).to eq("$2,471.25")
      end
    end

    describe '#discounted_items' do
      it 'returns a list of discounted invoice_items with a attribute item_discount' do
        expect(InvoiceItem.discounted_items).to match_array([@invoice_item_1, @invoice_item_2, @invoice_item_3])
        expect(@invoice.invoice_items.discounted_items).to match_array([@invoice_item_1, @invoice_item_3])
        expect(InvoiceItem.discounted_items.find(@invoice_item_1.id).item_discount).to eq(33750)
        expect(InvoiceItem.discounted_items.find(@invoice_item_2.id).item_discount).to eq(4800)
      end
    end

    describe '#total_discount' do
      it 'returns a sum of all the invoice_items item_discount' do
        expect(InvoiceItem.total_discount).to eq(39512)
        expect(@invoice.invoice_items.total_discount).to eq(34712)
      end
    end

    describe '#revenue_with_discounts' do
      it 'returns the total revenue with discounts subtracted' do
        expect(InvoiceItem.revenue_with_discounts).to eq(262913)
        expect(@invoice.invoice_items.revenue_with_discounts).to eq(212413)
      end
    end
  end
end
